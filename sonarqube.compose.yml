services:
  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube
    restart: unless-stopped
    depends_on:
      sonarqube-postgres:
        condition: service_healthy
    environment:
      - SONAR_JDBC_USERNAME=${SONAR_DB_USER:-sonarqube}
      - SONAR_JDBC_PASSWORD=${SONAR_DB_PASSWORD:-sonarqube}
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-postgres:5432/sonarqube
      - SONAR_SEARCH_JAVAADDITIONALOPTS=-Xmx2g -Xms1g
    ports:
      - "9000:9000"
    networks:
      - sonarqube
    volumes:
      - sonarqube:/opt/sonarqube/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 60s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  sonarqube-postgres:
    image: postgres:16.4-alpine
    container_name: sonarqube-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${SONAR_DB_USER:-sonarqube}
      - POSTGRES_PASSWORD=${SONAR_DB_PASSWORD:-sonarqube}
      - POSTGRES_DB=sonarqube
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - sonarqube-postgres:/var/lib/postgresql/data/pgdata
    networks:
      - sonarqube
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${SONAR_DB_USER:-sonarqube}"]
      interval: 30s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

networks:
  sonarqube:
    driver: bridge

volumes:
  sonarqube:
  sonarqube-postgres:
